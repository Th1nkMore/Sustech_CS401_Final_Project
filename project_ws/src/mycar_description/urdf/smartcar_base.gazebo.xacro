<?xml version="1.0"?>
<robot name="smartcar" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:gazebo="http://playerstage.sourceforge.net/gazebo/xmlschema/#gz"
    xmlns:model="http://playerstage.sourceforge.net/gazebo/xmlschema/#model"
    xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
    xmlns:body="http://playerstage.sourceforge.net/gazebo/xmlschema/#body"
    xmlns:geom="http://playerstage.sourceforge.net/gazebo/xmlschema/#geom"
    xmlns:joint="http://playerstage.sourceforge.net/gazebo/xmlschema/#joint"
    xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
    xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
    xmlns:rendering="http://playerstage.sourceforge.net/gazebo/xmlschema/#rendering"
    xmlns:renderable="http://playerstage.sourceforge.net/gazebo/xmlschema/#renderable"
    xmlns:physics="http://playerstage.sourceforge.net/gazebo/xmlschema/#physics"
    xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- PROPERTY LIST -->
    <xacro:property name="M_PI" value="3.1415926"/>
    <xacro:property name="base_mass" value="10.0" />
    <xacro:property name="base_length" value="0.16"/>
    <xacro:property name="base_width" value="0.25"/>
    <xacro:property name="base_height" value="0.05"/>
    <xacro:property name="wheel_mass" value="1.0" />
    <xacro:property name="wheel_radius" value="0.025"/>
    <xacro:property name="wheel_length" value="0.02"/>

    <material name="yellow">
        <color rgba="1 0.4 0 1"/>
    </material>

    <material name="black">
        <color rgba="0 0 0 0.95"/>
    </material>

    <material name="gray">
        <color rgba="0.75 0.75 0.75 1"/>
    </material>

    <!-- Defining the inertial used in this robot -->
    <xacro:macro name="default_inertial" params="mass">
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial_matrix" params="m r h">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cube_inertial_matrix" params="m length width height">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(height*height+width*width)/12}" ixy = "0" ixz = "0" iyy="${m*(height*height+length*length)/12}" iyz = "0" izz="${m*(length*length+width*width)/12}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertial_matrix" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0" iyy="${2*m*r*r/5}" iyz="0" izz="${2*m*r*r/5}" />
        </inertial>
    </xacro:macro>

    <!-- Defining wheel used in this robot -->
    <xacro:macro name="wheel" params="r_l f_b reflectx reflecty reflectz">
        <joint name="${r_l}_${f_b}_wheel_joint" type="continuous">
            <axis xyz="0 0 1"/>
            <parent link="base_link"/>
            <child link="${r_l}_${f_b}_wheel"/>
            <origin rpy="${-M_PI/2} 0 0" xyz="${reflectx} ${reflecty} ${reflectz}"/>
            <limit effort="100" velocity="100"/>
            <joint_properties damping="0.0" friction="0.0"/>
        </joint>

    <link name="${r_l}_${f_b}_wheel">
        <visual>
        <!-- <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" /> -->
            <geometry>
                <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
            </geometry>
            <material name="black" />
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <!-- <origin rpy="0 ${M_PI/2} ${M_PI/2}" xyz="${reflectx} ${reflecty} ${reflectz}"/> -->
            <geometry>
                <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial_matrix m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
    </link>
        <!-- Transmission is important to link the joints and the controller -->
        <transmission name="${r_l}_${f_b}_wheel_joint_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${r_l}_${f_b}_wheel_joint" >
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>    
            <actuator name="${r_l}_${f_b}_wheel_joint_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>

        <gazebo reference="${r_l}_${f_b}_wheel">
            <material>Gazebo/FlatBlack</material>
        </gazebo>
        </xacro:macro>

        <xacro:macro name="smartcar_base">
                <link name="base_link">
                <visual>
                    <geometry>
                        <box size="${base_length} ${base_width} ${base_height}"/>
                    </geometry>
                    <origin rpy="0 0 ${M_PI/2}" xyz="0 0 0"/>
                    <material name="blue">
                        <color rgba="0.0 0.0 1 1"/>
                    </material>
                </visual>

                <collision>
                    <geometry>
                        <box size="${base_length} ${base_width} ${base_height}"/>
                    </geometry>
                </collision>

                <xacro:default_inertial mass="${base_mass}"/>

                </link>
            <gazebo reference="base_link">
                <material>Gazebo/Blue</material>
            </gazebo>

            <link name="base_footprint">
                <visual>
                    <origin xyz="0 0 0" rpy="0 0 0" />
                    <geometry>
                        <box size="0.001 0.001 0.001" />
                    </geometry>
                </visual>
            </link>
                <gazebo reference="base_footprint">
                    <turnGravityOff>false</turnGravityOff>
                </gazebo>
            <joint name="base_footprint_joint" type="fixed">
                <origin xyz="0 0 ${base_height/2 + wheel_radius*2}" rpy="0 0 0" />
                <parent link="base_footprint"/>
                <child link="base_link" />
            </joint>
            <xacro:wheel r_l="left" f_b ="front" reflectx="${base_width/2-wheel_radius}" reflecty="${base_length/2}" reflectz="-0.03"/>
            <xacro:wheel r_l="right" f_b ="front" reflectx="${base_width/2-wheel_radius}" reflecty="${-base_length/2}" reflectz="-0.03"/>
            <xacro:wheel r_l="left" f_b ="back" reflectx="${-base_width/2+wheel_radius}" reflecty="${base_length/2}" reflectz="-0.03"/>
            <xacro:wheel r_l="right" f_b ="back" reflectx="${-base_width/2+wheel_radius}" reflecty="${-base_length/2}" reflectz="-0.03"/>
            <gazebo>
                <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
                    <updateRate>50.0</updateRate>
                    <robotNamespace></robotNamespace>

                    <leftFrontJoint>left_front_wheel_joint</leftFrontJoint>
                    <leftRearJoint>left_back_wheel_joint</leftRearJoint>
                    <rightFrontJoint>right_front_wheel_joint</rightFrontJoint>
                    <rightRearJoint>right_back_wheel_joint</rightRearJoint>
                    
                    <wheelSeparation>${base_length}</wheelSeparation>
                    <wheelDiameter>${2*wheel_radius}</wheelDiameter>
                    <commandTopic>cmd_vel</commandTopic>
                    <odometryTopic>odom</odometryTopic>
                    <robotBaseFrame>base_footprint</robotBaseFrame>
                    <odometryFrame>odom</odometryFrame>
                    <torque>1</torque>
                    <topicName>cmd_vel</topicName>
                    <broadcastTF>1</broadcastTF>
                </plugin>
            </gazebo>
        </xacro:macro>
</robot>